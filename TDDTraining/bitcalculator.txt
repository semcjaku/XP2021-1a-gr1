W technice TDD (analogicznie jak w poprzednim ćwiczeniu) implementujemy funkcję zwracającą ilość bitów o wartości '1'
w podanej nieujemnej liczbie całkowitej. Implementację wykonujemy krok po kroku.
———————————————————————
a) implementujemy funkcję o sygnaturze

int noOfBits1(String number)

Funkcja jako argument (number) dostaje co najwyżej jedną liczbę 8-bitową nieujemną (w zakresie 0-255) w reprezentacji
dziesiętnej i zwraca ilość bitów równych '1' w reprezentacji binarnej tej liczby.
Dla pustego napisu funkcja powinna zwracać wartość zero.
———————————————————————
b) Dla liczby poza zakresem (0-255) funkcja powinna zgłaszać wyjątek (błąd).
———————————————————————
c) Dopuszczamy przekazanie więcej niż jednej liczby w ramach napisu (argumentu).
Zmieniamy sygnaturę (nazwę argumentu) na:
int noOfBits1(String numbers)
W ramach napisu (numbers) funkcja powinna dopuszczać dowolną ilość liczb całkowitych (w zakresie 0-255) rozdzielonych średnikami
———————————————————————
d) Funkcja powinna dopuszczać jako znak rozdzielający liczby (w ramach argumentu numbers) zarówno średnik jak i spację
———————————————————————
e) Funkcja powinna dopuszczać jako znak rozdzielający liczby zarówno średnik jak i dowolny ciąg składający się z białych znaków (spacji, tabulacji, znaków końca linii)
———————————————————————
f) Jeżeli lista liczb (argument numbers) ma niepoprawny format (np. używa innego separatora niż określono powyżej), funkcja powinna zgłaszać wyjątek (błąd)
———————————————————————
e) Funkcja powinna dopuszczać w ramach argumentu numbers zarówno liczby w reprezentacji dziesiętnej (np. 255) jak i szesnastkowej – zapisane z prefiksem '$' (np. $ff)
Liczby w tych dwóch reprezentacjach mogą być wymieszane np. '10,$a4, $ff, 253'.